<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <!-- ストリーミングモーダル -->
    <div class="modal fade" tabindex="-1" id="modal">
      <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="title">写真撮影</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body" id="output">
            <img
              src="/stream"
              class="w-100 h-100"
              style="object-fit: contain"
            />
          </div>
          <div class="modal-footer">
            <div
              class="d-flex flex-row justify-content-between align-items-center w-100"
            >
              <div class="">
                <span id="recoding" hidden class="text-danger">●録画中...</span>
                <span id="timer" hidden>00:00</span>
              </div>
              <div class="">
                <button type="button" id="photoBtn" class="btn btn-primary">
                  写真撮影
                </button>
                <button type="button" id="videoBtn" class="btn btn-primary">
                  録画開始
                </button>
                <button
                  type="button"
                  id="videoStopBtn"
                  hidden
                  class="btn btn-danger"
                >
                  録画停止
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- プレビューモーダル -->
    <div class="modal fade" tabindex="-1" id="previewModal">
      <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">保存を行ってもよろしいですか？</h5>
          </div>
          <div class="modal-body" id="preview"></div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-danger"
              data-bs-dismiss="modal"
              id="disposeBtn"
            >
              破棄する
            </button>
            <button type="button" id="saveBtn" class="btn btn-success">
              保存する
            </button>
          </div>
        </div>
      </div>
    </div>

    <h1>Hello</h1>
    <button
      class="btn btn-success"
      data-bs-toggle="modal"
      data-bs-target="#modal"
    >
      画像撮影
    </button>
  </body>
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"
    crossorigin="anonymous"
  ></script>
  <script>
    const streamModal = document.getElementById("modal");
    let streamBoot;
    let stream;
    let file;
    let timerInterval;
    let startTime;

    function formatTime(seconds) {
      const m = String(Math.floor(seconds / 60)).padStart(2, "0");
      const s = String(seconds % 60).padStart(2, "0");
      return `${m}:${s}`;
    }

    document
      .getElementById("modal")
      .addEventListener("shown.bs.modal", async () => {
        stream = await navigator.mediaDevices.getUserMedia({ video: true });
        document.getElementById("preview").srcObject = stream;
      });

    document.getElementById("photoBtn").addEventListener("click", async () => {
      const res = await fetch("/photo");
      const data = await res.json();
      document.getElementById(
        "output"
      ).innerHTML = `<img src=${data.url} width="400">`;
    });

    document
      .getElementById("videoBtn")
      .addEventListener("click", async function () {
        const res = await fetch("/video/start");
        const data = await res.json();
        if (data.result) {
          //録画中枠の表示
          startTime = Date.now();
          timerInterval = setInterval(() => {
            const elapsedSec = Math.floor((Date.now() - startTime) / 1000);
            document.getElementById("timer").textContent =
              formatTime(elapsedSec);
          }, 1000);
          document.getElementById("title").style.backgroundColor = "#FF0000";
          document.getElementById("recoding").hidden = false;
          document.getElementById("videoStopBtn").hidden = false;
          document.getElementById("timer").hidden = false;
          this.hidden = true;
        } else alert(data.message);
      });

    document
      .getElementById("videoStopBtn")
      .addEventListener("click", async function () {
        document.getElementById("title").style.backgroundColor = "#FFFFFF";

        const res = await fetch("/video/stop");
        const data = await res.json();
        if (data.result) {
          clearInterval(timerInterval);
          document.getElementById("timer").textContent = "00:00";
          this.hidden = true;
          document.getElementById("recoding").hidden = true;
          document.getElementById("timer").hidden = true;
          document.getElementById("videoBtn").hidden = false;
          //プレビューモーダルの開始
          const modalElement = document.getElementById("previewModal");
          const preview = document.getElementById("preview");
          const myModal = new bootstrap.Modal(modalElement);

          const video = document.createElement("video");
          video.src = data.file;
          video.controls = true;
          video.style.widows = "100%";

          preview.appendChild(video);

          myModal.show();
          file = data.file;
          console.log("here111");
        } else alert(data.message);
      });

    //破棄する
    document
      .getElementById("disposeBtn")
      .addEventListener("click", async () => {
        if (file) {
          const res = await fetch(`/dispose/${file}`);
          const data = await res.json();
          if (data.result) {
            console.log(`ファイル:${file}を削除しました`);
          } else alert(data.message);
        }
      });

    //保存する
    document.getElementById("saveBtn").addEventListener("click", async () => {
      if (file) {
      }
    });
  </script>
</html>
